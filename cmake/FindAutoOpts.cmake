# - Try to find AutoOpts 
# Once done this will define
#
#  AUTOOPTS_FOUND - system has AutoOpts
#  AUTOOPTS_CFLAGS - Compiler switches required for using AutoOpts
#  AUTOOPTS_INCLUDE_DIRS - location of AutoOpts header files
#  AUTOOPTS_LIBRARY_DIRS - location of AutoOpts libraries
#  AUTOOPTS_LIBRARIES - Link these to use AutoOpt
#
#  Copyright (c) 2010 Roman Putanowicz <putanowr@l5.pk.edu.pl>
#            (c) 2016 Aleksey Midenkov <midenok@gmail.com>
#
#  Redistribution and use is allowed according to the terms of the New
#  BSD license.
#
if (AUTOOPTS_LIBRARIES AND AUTOOPTS_INCLUDE_DIRS )
  # in cache already
  set(AUTOOPTS_FOUND TRUE)
else (AUTOOPTS_LIBRARIES AND AUTOOPTS_INCLUDE_DIRS)
  IF (AutoOpts_FIND_REQUIRED)
    FIND_PACKAGE(PkgConfig QUIET REQUIRED)
    PKG_CHECK_MODULES(AUTOOPTS REQUIRED autoopts)
  ELSE ()
    FIND_PACKAGE(PkgConfig QUIET)
    IF (PKG_CONFIG_FOUND)
      PKG_CHECK_MODULES(AUTOOPTS autoopts)
    ENDIF ()
  ENDIF ()

  IF (AUTOOPTS_FOUND)
    FIND_PROGRAM(AUTOOPTS_CONFIG NAMES autoopts-config)

    EXECUTE_PROCESS(COMMAND "${AUTOOPTS_CONFIG}" --autogen
                  OUTPUT_VARIABLE AUTOGEN_PROGRAM
                  OUTPUT_STRIP_TRAILING_WHITESPACE
    )
    EXECUTE_PROCESS(COMMAND "${AUTOOPTS_CONFIG}" --cflags 
                  OUTPUT_VARIABLE AUTOOPTS_CFLAGS
                  OUTPUT_STRIP_TRAILING_WHITESPACE
    )
    EXECUTE_PROCESS(COMMAND "${AUTOOPTS_CONFIG}" --includedir 
                  OUTPUT_VARIABLE AUTOOPTS_INCLUDE_DIRS
                  OUTPUT_STRIP_TRAILING_WHITESPACE
    )
    EXECUTE_PROCESS(COMMAND "${AUTOOPTS_CONFIG}" --libdir 
                  OUTPUT_VARIABLE AUTOOPTS_LIBRARY_DIRS
                  OUTPUT_STRIP_TRAILING_WHITESPACE
    )
    EXECUTE_PROCESS(COMMAND "${AUTOOPTS_CONFIG}" --pkgdatadir
                  OUTPUT_VARIABLE AUTOGEN_DATADIR
                  OUTPUT_STRIP_TRAILING_WHITESPACE
    )
    STRING(STRIP ${AUTOGEN_PROGRAM} AUTOGEN_PROGRAM)
    STRING(STRIP ${AUTOOPTS_LIBRARY_DIRS} AUTOOPTS_LIBRARY_DIRS)

    SET(AUTOGEN_PROGRAM ${AUTOGEN_PROGRAM} CACHE STRING AUTOGEN_PROGRAM FORCE)
    SET(AUTOGEN_FLAGS "-L${AUTOGEN_DATADIR}" CACHE STRING AUTOGEN_FLAGS FORCE)
    SET(AUTOOPTS_LIBRARIES ${AUTOOPTS_LIBRARIES} CACHE STRING AUTOOPTS_LIBRARIES FORCE)
    SET(AUTOOPTS_INCLUDE_DIRS ${AUTOOPTS_INCLUDE_DIRS} CACHE STRING AUTOOPTS_INCLUDE_DIRS FORCE)
    SET(AUTOOPTS_LIBRARY_DIRS ${AUTOOPTS_LIBRARY_DIRS} CACHE PATH AUTOOPTS_LIBRARY_DIRS FORCE)
    MESSAGE(STATUS "AUTOGEN_PROGRAM ${AUTOGEN_PROGRAM}")
    MESSAGE(STATUS "AUTOGEN_DATADIR ${AUTOGEN_DATADIR}")
    MESSAGE(STATUS "AUTOOPTS_CFLAGS ${AUTOOPTS_CFLAGS}")
    MESSAGE(STATUS "AUTOOPTS_LIBRARIES ${AUTOOPTS_LIBRARIES}")
    MESSAGE(STATUS "AUTOOPTS_LIBRARY_DIRS ${AUTOOPTS_LIBRARY_DIRS}")
  ENDIF (AUTOOPTS_FOUND)
endif (AUTOOPTS_LIBRARIES AND AUTOOPTS_INCLUDE_DIRS)

MACRO(TARGET_AUTOOPTS target optdef)
GET_FILENAME_COMPONENT(optname ${optdef} NAME_WE)
ADD_CUSTOM_COMMAND (
  OUTPUT ${optname}.c ${optname}.h
  COMMAND "${AUTOGEN_PROGRAM}" ${AUTOGEN_FLAGS} ${CMAKE_CURRENT_SOURCE_DIR}/${optdef}
  DEPENDS ${optdef}
  COMMENT "AutoGen: generating ${optname}.c ${optname}.h"
  VERBATIM
)
TARGET_SOURCES (${optname} PUBLIC ${optname}.c)
ENDMACRO(TARGET_AUTOOPTS)

